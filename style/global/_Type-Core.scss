@import "Colors-Core";

$font-family--primary: "PPEditorialNew";
$font-family--secondary: "Epilogue";

$font-subtypes: ("accent", "big");

//TODO: add some code to reverse maps so that when writing it here it can be written more logically as (small number, big number)
// TODO: Add a selection of modifiers such as one for non-linear scaling of the whole map while preserving the smallest number, like here: https://chatgpt.com/c/612962fb-2952-46d2-9f38-d2e0fae3804b
// prettier-ignore
// TODO: Flexible number of map values, right now only one is supported but it should be X number 
// TODO: The ability to hardcode a value for a specific breakpoint key, so instead of two values in an array it could be "font-size": ("md": 16, "lg": 18), this would go great with adjusting font-weights at different breakpoints
// TODO: Give text styles its own file, feel free to change the name of it if you find something more fitting

$text-styles: (
  "h1": (
    "font-family": $font-family--primary,
    "font-weight": 400,
    "font-size": (
      55,
      100,
    ),
    "line-height": 115%,
  ),
  "h2": (
    "font-family": $font-family--primary,
    "font-weight": 400,
    "font-size": (
      44,
      75,
    ),
  ),
  "h3": (
    "font-family": $font-family--secondary,
    "font-weight": 600,
    "font-size": (
      32,
      56,
    ),
    "line-height": 116.071%,
  ),
  "h4": (
    "font-family": $font-family--secondary,
    "font-weight": 600,
    "font-size": (
      26,
      42,
    ),
    "line-height": 114.286%,
  ),
  "h5": (
    "font-family": $font-family--secondary,
    "font-weight": 400,
    "font-size": (
      20,
      32,
    ),
    "line-height": 130%,
  ),
  "h6": (
    "font-family": $font-family--secondary,
    "font-weight": 400,
    "font-size": (
      16,
      22,
    ),
    "line-height": 133.333%,
  ),
  "body": (
    "font-family": $font-family--secondary,
    "font-weight": 400,
    "font-size": (
      16,
      17,
    ),
    "line-height": 138.5%,
  ),
  "small": (
    "font-family": $font-family--secondary,
    "font-weight": 600,
    "font-size": (
      12,
      14,
    ),
    "line-height": 128.571%,
    "text-transform": uppercase,
  ),
);



@mixin text-default {
  text-transform: none !important;
  letter-spacing: normal !important;
}

@mixin apply-properties($properties) {
  @each $property-name, $property-value in $properties {
    @if type-of($property-value) == "list" {
      // no nothing if its a map because its probably fluid-type
      // @each $value in $property-value {
      //   #{$property-name}: $value !important;
      // }
    } @else {
      #{$property-name}: $property-value !important;
    }
  }
}

@mixin text-style($key, $value) {
  font-size: var(--font-size--#{$key}) !important;
  line-height: var(--line-height--#{$key}, 120%) !important;
  @include text-default;

  $styles: map-remove-multiple($value, $font-subtypes);
  $subtypes: map-get-multiple($value, $font-subtypes);

  @if $styles {
    @include apply-properties($styles);
  }

  // @warn $subtypes;
  @if $subtypes {
    @each $subtype, $properties in $subtypes {
      &__#{$subtype} {
        font-size: var(--font-size--#{$key}__#{$subtype}) !important;
        line-height: var(--font-size--#{$key}__#{$subtype}, normal) !important;

        @include apply-properties($properties);
      }
    }
  }
}

@mixin mixin-text-style($key, $font-subtype: false) {
  $styles: map-get($text-styles, $key);

  // @each $subtype in $font-subtypes {
  //   @if map-has-key($styles, $subtype) {
  //     $font-subtype: $subtype;
  //   }
  // }
  // @warn $key;

  @if $font-subtype {
    $styles: map-get(map-get($text-styles, $key), $font-subtype);
    font-size: var(--font-size--#{$key}__#{$font-subtype}, var(--font-size--#{$key})) !important;
    line-height: var(
      --line-height--#{$key}__#{$font-subtype} var(--line-height--#{$key}),
      normal
    ) !important;
  } @else {
    $styles: map-remove(map-get($text-styles, $key), $font-subtype);
    font-size: var(--font-size--#{$key}) !important;
    line-height: var(--line-height--#{$key}, normal) !important;
  }

  @include text-default;
  @each $property-name, $property-value in $styles {
    @if type-of($property-value) != "map" and type-of($property-value) != "list" {
      #{$property-name}: $property-value !important;
    }
  }
}

%text {
  @each $key, $value in $text-styles {
    &--#{$key} {
      @include text-style($key, $value);
    }
  }
}



// TODO: If you seperate these out into their own file I bet you could create a system to generate them using node
// TODO: Seperate your compilation script into a main and its sub tasks and create one that grabs this file and does this.  You could do the same with breakpoints
// TODO: You could save the master map in one seperate file, and then use a compilation script to parse it, and generate out $h1--font-size, $h1--line-height, etc. then give that its own file.  questionably useful though since they're already css variables but it could be helpful for math or scaling opperations because you could have it be the actual values instead of the variables, or make it just a copy of the variables, so that you could enable your whole @include text-scale(0.5) idea, which is currently limited by redefining the variables as themselves.  but if thats all you want then you don't need a pre-pre processor to do it i don't think.

@mixin text--h1 {
  @include mixin-text-style("h1");
}
// @mixin text--h1__accent {
// @include mixin-text-style("h1", "accent");
// }
@mixin text--h2 {
  @include mixin-text-style("h2");
}
// @mixin text--h2__accent {
// @include mixin-text-style("h2", "accent");
// }
@mixin text--h3 {
  @include mixin-text-style("h3");
}
// @mixin text--h3__accent {
// @include mixin-text-style("h3", "accent");
// }
@mixin text--h4 {
  @include mixin-text-style("h4");
}
// @mixin text--h4__accent {
// @include mixin-text-style("h4", "accent");
// }
@mixin text--h5 {
  @include mixin-text-style("h5");
}
// @mixin text--h5__accent {
// @include mixin-text-style("h5", "accent");
// }
@mixin text--h6 {
  @include mixin-text-style("h6");
}
@mixin text--body {
  @include mixin-text-style("body");
}
@mixin text--small {
  @include mixin-text-style("small");
}

// @mixin text--body__big {
//   @include mixin-text-style("body", "big");
// }
